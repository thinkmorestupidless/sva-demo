userSim {
  concurrent-users-per-node = 100

  session {
    // average duration of session, set low for testing
    duration-mean-seconds = 60
    // duration standard deviation
    duration-stddev-seconds = 30
    // average number of shopping cart items
    cart-items-mean = 5
    // shopping cart items standard deviation
    cart-items-stddev = 3
    // interval to wait to connect to cluster
    cluster-connect-interval-seconds = 5
  }
}

es.demos {
  # settings for es demos application level
  app {

  }

  # ShoppingCartManager settings
  shoppingCartManager {
    number-of-shards = 30

    // number of retries of shopping cart actions in the event of failure
    num-retries = 3
    // interval to wait before retries
    retry-interval-millis = 1000
  }


  http.server {
    host = "0.0.0.0"
    port = 9975
    request-timeout = 5000
  }
}


# specific dispatcher for shopping session so as to not affect the other demo related actors
shopping-session-dispatcher {
  type = PinnedDispatcher
  executor = "thread-pool-executor"
}

akka {
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = DEBUG

  actor {
    debug {
      lifecycle = on
      unhandled = on
    }

    provider = cluster

    deployment {
      "/traffic-generator-actor" {
        dispatcher      = shopping-session-dispatcher
      }
      "/traffic-generator-actor/**" {
        dispatcher      = shopping-session-dispatcher
      }
    }
  }

  http {
    client {
      connecting-timeout = 10 s
    }
    host-connection-pool {
      max-connections = 20
      max-open-requests = 128
    }
  }

  cluster {
    sharding.least-shard-allocation-strategy {
      rebalance-threshold = 5
    }
  }
}

cinnamon {
  akka {
    actors {
      "/user/*" {
        report-by = class
      }
      "/system//sharding/com.lightbend.esdemos.shoppingcartapp.ShoppingCart/*" {
        report-by = class
      }
    }

    cluster {
      node-metrics = on
      shard-region-info = on
    }

    dispatchers {
      basic-information {
        names = ["*"]
      }
      time-information {
        names = ["*"]
      }
    }

    http {
      servers {
        "*:*" {
          paths {
            "*" {
              metrics = on
            }
          }
        }
      }

      clients {
        "*:*" {
          paths {
            "*" {
              metrics = on
            }
          }
        }
      }
    }

    remote {
      serialization-timing = on
      failure-detector-metrics = on
    }
  }

  prometheus {
    exporters += http-server
    http-server {
      host = "0.0.0.0"
    }
  }
}